rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isOfficial', false) == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'fullName', 'createdAt']) &&
             data.email is string &&
             data.fullName is string &&
             data.createdAt is timestamp;
    }
    
    function isValidBookData(data) {
      return data.keys().hasAll(['title', 'author', 'price', 'condition', 'userId', 'createdAt']) &&
             data.title is string &&
             data.author is string &&
             data.price is number &&
             data.condition is string &&
             data.userId is string &&
             data.createdAt is timestamp &&
             data.price >= 0 && data.price <= 100000;
    }

    // Users collection
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read, write: if isAdmin();
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) && isValidUserData(request.resource.data);
    }
    
    // Books collection
    match /books/{bookId} {
      allow read, write: if isAuthenticated() && 
                            (resource == null || isOwner(resource.data.userId));
      allow read, write: if isAdmin();
      allow read: if isAuthenticated() && 
                     (resource == null || resource.data.get('isApproved', true) == true);
      allow create: if isAuthenticated() && 
                       isValidBookData(request.resource.data) &&
                       isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && 
                       (isOwner(resource.data.userId) || 
                        isOwner(resource.data.get('buyerId', '')));
    }
    
    // textbooks互換性
    match /textbooks/{bookId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      (resource == null || isOwner(resource.data.userId));
      allow update: if isAuthenticated() && 
                       (isOwner(resource.data.userId) || 
                        isOwner(resource.data.get('buyerId', '')));
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated() && 
                            (resource == null || 
                             isOwner(resource.data.buyerId) || 
                             isOwner(resource.data.sellerId));
      allow read: if isAdmin();
      allow create: if isAuthenticated() && 
                       (isOwner(request.resource.data.buyerId) || 
                        isOwner(request.resource.data.sellerId));
      
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
                              (exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
                               (isOwner(get(/databases/$(database)/documents/conversations/$(conversationId)).data.buyerId) ||
                                isOwner(get(/databases/$(database)/documents/conversations/$(conversationId)).data.sellerId)));
        allow read, delete: if isAdmin();
        allow create: if isAuthenticated() && 
                         request.resource.data.senderId == request.auth.uid &&
                         request.resource.data.keys().hasAll(['text', 'senderId', 'createdAt']);
      }
    }
    
    // Favorites collection
    match /favorites/{favoriteId} {
      allow read, write: if isAuthenticated() && 
                            (resource == null || isOwner(resource.data.userId));
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId);
    }
    
    // Reports collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && 
                     (resource == null || isOwner(resource.data.reporterId));
      allow read, write: if isAdmin();
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.reporterId) &&
                       request.resource.data.keys().hasAll(['reporterId', 'reportedUserId', 'reason', 'createdAt']);
    }
    
    // User Tokens collection (FCM)
    match /userTokens/{userId} {
      allow read, write: if isOwner(userId);
      allow read, write: if isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // Admin collections
    match /admin_notifications/{notificationId} {
      allow read, write: if isAdmin();
    }
    
    match /page_views/{viewId} {
      allow create: if isAuthenticated();
      allow read: if isAdmin();
    }
    
    match /admin_delete_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    match /admin_message_delete_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    match /admin_conversation_delete_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    match /admin_transaction_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Stripe関連（サーバーサイドのみ）
    match /stripe_customers/{customerId} {
      allow read, write: if false;
    }
    
    match /stripe_payment_intents/{paymentIntentId} {
      allow read, write: if false;
    }
    
    // デフォルト拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}