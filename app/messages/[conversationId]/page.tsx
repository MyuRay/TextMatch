"use client"

import { useEffect, useState } from "react"
import { useParams, useRouter } from "next/navigation"
import { db } from "@/lib/firebaseConfig"
import {
  collection,
  addDoc,
  query,
  orderBy,
  onSnapshot,
  serverTimestamp,
  doc,
  getDoc,
  updateDoc,
  where,
  getDocs,
} from "firebase/firestore"
import { useAuth } from "@/lib/useAuth"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Send, User, BookOpen, Clock, CheckCircle, RotateCcw } from "lucide-react"
import Link from "next/link"
import { getUserProfile, getTextbookById, updateTextbookStatus } from "@/lib/firestore"
import { sendEmailNotification, createMessageNotificationEmail } from "@/lib/emailService"
import { createMessageNotification, createTransactionNotification, createReceiptNotification } from "@/lib/notifications"
import { Header } from "../../components/header"

export default function ConversationPage() {
  const { conversationId } = useParams()
  const [messages, setMessages] = useState<any[]>([])
  const [newMessage, setNewMessage] = useState("")
  const [conversation, setConversation] = useState<any>(null)
  const [otherUser, setOtherUser] = useState<{name: string, avatarUrl?: string}>({name: ""})
  const [currentUserProfile, setCurrentUserProfile] = useState<{name: string, avatarUrl?: string}>({name: ""})
  const [textbook, setTextbook] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const { user, loading: authLoading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    let unsubscribe: (() => void) | null = null

    const loadConversationData = async () => {
      if (!user) {
        router.push("/login")
        return
      }
      
      try {
        // ‰ºöË©±„Éá„Éº„Çø„ÇíÂèñÂæó
        const convDoc = await getDoc(doc(db, "conversations", conversationId as string))
        if (!convDoc.exists()) {
          router.push("/messages")
          return
        }
        
        const convData = convDoc.data()
        setConversation(convData)
        
        // Áõ∏Êâã„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Å®ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
        const otherUserId = convData.buyerId === user.uid ? convData.sellerId : convData.buyerId
        const [otherUserProfile, currentProfile, textbookData] = await Promise.all([
          getUserProfile(otherUserId),
          getUserProfile(user.uid),
          getTextbookById(convData.bookId)
        ])
        
        setOtherUser(otherUserProfile || {name: "‰∏çÊòé„Å™„É¶„Éº„Ç∂„Éº"})
        setCurrentUserProfile(currentProfile || {name: "„ÅÇ„Å™„Åü"})
        setTextbook(textbookData)
        
        // Êú™Ë™≠„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊó¢Ë™≠„Å´„Åô„Çã
        await markMessagesAsRead()
        
        // „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ
        const messagesRef = collection(db, "conversations", conversationId as string, "messages")
        const q = query(messagesRef, orderBy("createdAt"))

        unsubscribe = onSnapshot(q, async (snapshot) => {
          const msgs = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))
          setMessages(msgs)
          setLoading(false)
          
          // Êñ∞„Åó„ÅÑÊú™Ë™≠„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çå„Å∞Êó¢Ë™≠„Å´„Åô„Çã
          await markMessagesAsRead()
        }, (error) => {
          console.error("„É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæó„Ç®„É©„Éº:", error)
          setLoading(false)
        })
      } catch (error) {
        console.error("‰ºöË©±„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:", error)
        setLoading(false)
      }
    }
    
    if (!authLoading) {
      loadConversationData()
    }

    return () => {
      if (unsubscribe) {
        unsubscribe()
      }
    }
  }, [conversationId, user, authLoading, router])

  const markMessagesAsRead = async () => {
    if (!user || !conversationId) return
    
    try {
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      const snapshot = await getDocs(messagesRef)
      
      // Ëá™ÂàÜ‰ª•Â§ñ„Åã„ÇâÈÄÅ‰ø°„Åï„Çå„Åü„É°„ÉÉ„Çª„Éº„Ç∏„Åß„ÄÅisRead„Ååfalse„Åæ„Åü„ÅØÊú™Ë®≠ÂÆö„ÅÆ„ÇÇ„ÅÆ„ÇíÊó¢Ë™≠„Å´„Åô„Çã
      const updatePromises = snapshot.docs
        .filter(messageDoc => {
          const data = messageDoc.data()
          return data.senderId !== user.uid && (data.isRead === false || data.isRead === undefined)
        })
        .map(messageDoc => 
          updateDoc(doc(db, "conversations", conversationId as string, "messages", messageDoc.id), {
            isRead: true
          })
        )
      
      await Promise.all(updatePromises)
    } catch (error) {
      console.error("„É°„ÉÉ„Çª„Éº„Ç∏Êó¢Ë™≠Êõ¥Êñ∞„Ç®„É©„Éº:", error)
    }
  }

  const handleSend = async () => {
    if (!newMessage.trim() || !user) return

    try {
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      await addDoc(messagesRef, {
        text: newMessage,
        senderId: user.uid,
        createdAt: serverTimestamp(),
        isRead: false,
      })
      
      // „É°„Éº„É´ÈÄöÁü•„ÇíÈÄÅ‰ø°
      await sendMessageNotification()
      
      // „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„ÇíÈÄÅ‰ø°
      await sendPushNotification()
      
      // „Ç¢„Éó„É™ÂÜÖÈÄöÁü•„Çí‰ΩúÊàê
      await createAppNotification()
      
      setNewMessage("")
    } catch (error) {
      console.error("„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:", error)
      alert("„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    }
  }

  const sendMessageNotification = async () => {
    try {
      if (!conversation || !textbook || !user) return

      // Âèó‰ø°ËÄÖ„ÇíÁâπÂÆöÔºàÈÄÅ‰ø°ËÄÖ„Åß„Å™„ÅÑÊñπÔºâ
      const recipientId = conversation.buyerId === user.uid ? conversation.sellerId : conversation.buyerId
      
      // Âèó‰ø°ËÄÖ„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó
      const recipientDoc = await getDoc(doc(db, "users", recipientId))
      if (!recipientDoc.exists()) return

      const recipientData = recipientDoc.data()
      const recipientEmail = recipientData.email
      const recipientName = recipientData.fullName || "„É¶„Éº„Ç∂„Éº"

      // ÈÄÅ‰ø°ËÄÖ„ÅÆÂêçÂâç
      const senderName = currentUserProfile.name || "„É¶„Éº„Ç∂„Éº"

      // „É°„ÉÉ„Çª„Éº„Ç∏„Éó„É¨„Éì„É•„ÉºÔºàÊúÄÂàù„ÅÆ50ÊñáÂ≠óÔºâ
      const messagePreview = newMessage.length > 50 
        ? newMessage.substring(0, 50) + "..." 
        : newMessage

      // „É°„Éº„É´ÂÜÖÂÆπ„Çí‰ΩúÊàê
      const emailNotification = createMessageNotificationEmail(
        recipientName,
        senderName,
        textbook.title,
        messagePreview
      )

      // Âèó‰ø°ËÄÖ„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíË®≠ÂÆö
      emailNotification.to = recipientEmail

      // „É°„Éº„É´ÈÄÅ‰ø°
      await sendEmailNotification(emailNotification)
      
      console.log(`üìß „É°„Éº„É´ÈÄöÁü•ÈÄÅ‰ø°ÂÆå‰∫Ü: ${recipientEmail}`)
    } catch (error) {
      console.error("„É°„Éº„É´ÈÄöÁü•ÈÄÅ‰ø°„Ç®„É©„Éº:", error)
      // „É°„Éº„É´ÈÄÅ‰ø°„Ç®„É©„Éº„Åß„ÇÇ„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÅØÁ∂ôÁ∂ö
    }
  }

  const sendPushNotification = async () => {
    try {
      if (!conversation || !textbook || !user) return

      // Âèó‰ø°ËÄÖ„ÇíÁâπÂÆöÔºàÈÄÅ‰ø°ËÄÖ„Åß„Å™„ÅÑÊñπÔºâ
      const recipientId = conversation.buyerId === user.uid ? conversation.sellerId : conversation.buyerId
      
      // ÈÄÅ‰ø°ËÄÖ„ÅÆÂêçÂâç
      const senderName = currentUserProfile.name || "„É¶„Éº„Ç∂„Éº"
      
      // „É°„ÉÉ„Çª„Éº„Ç∏„Éó„É¨„Éì„É•„ÉºÔºàÊúÄÂàù„ÅÆ30ÊñáÂ≠óÔºâ
      const messagePreview = newMessage.length > 30 
        ? newMessage.substring(0, 30) + "..." 
        : newMessage

      // „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„ÇíÈÄÅ‰ø°
      const response = await fetch('/api/send-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          recipientId,
          title: `${senderName}„Åã„Çâ„É°„ÉÉ„Çª„Éº„Ç∏`,
          body: `${textbook.title}: ${messagePreview}`,
          data: {
            conversationId: conversationId as string,
            bookId: textbook.id
          }
        })
      })

      if (response.ok) {
        console.log('üì± „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•ÈÄÅ‰ø°ÂÆå‰∫Ü')
      } else {
        console.log('„Éó„ÉÉ„Ç∑„É•ÈÄöÁü•ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      }
    } catch (error) {
      console.error("„Éó„ÉÉ„Ç∑„É•ÈÄöÁü•ÈÄÅ‰ø°„Ç®„É©„Éº:", error)
      // „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„Ç®„É©„Éº„Åß„ÇÇ„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÅØÁ∂ôÁ∂ö
    }
  }

  const createAppNotification = async () => {
    try {
      if (!conversation || !textbook || !user) return

      // Âèó‰ø°ËÄÖ„ÇíÁâπÂÆöÔºàÈÄÅ‰ø°ËÄÖ„Åß„Å™„ÅÑÊñπÔºâ
      const recipientId = conversation.buyerId === user.uid ? conversation.sellerId : conversation.buyerId
      
      // ÈÄÅ‰ø°ËÄÖ„ÅÆÂêçÂâç
      const senderName = currentUserProfile.name || "„É¶„Éº„Ç∂„Éº"

      // „Ç¢„Éó„É™ÂÜÖÈÄöÁü•„Çí‰ΩúÊàê
      await createMessageNotification(
        recipientId,
        senderName,
        textbook.title,
        conversationId as string
      )

      console.log('üì≤ „Ç¢„Éó„É™ÂÜÖÈÄöÁü•‰ΩúÊàêÂÆå‰∫Ü')
    } catch (error) {
      console.error("„Ç¢„Éó„É™ÂÜÖÈÄöÁü•‰ΩúÊàê„Ç®„É©„Éº:", error)
      // ÈÄöÁü•‰ΩúÊàê„Ç®„É©„Éº„Åß„ÇÇ„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÅØÁ∂ôÁ∂ö
    }
  }

  const handleStatusChange = async (newStatus: 'available' | 'sold') => {
    if (!user || !textbook || !conversation) return
    
    // Âá∫ÂìÅËÄÖ„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
    if (user.uid !== conversation.sellerId) {
      alert("Âá∫ÂìÅËÄÖ„ÅÆ„Åø„ÅåÂèñÂºïÁä∂Ê≥Å„ÇíÂ§âÊõ¥„Åß„Åç„Åæ„Åô")
      return
    }
    
    try {
      const buyerId = newStatus === 'sold' ? conversation.buyerId : undefined
      await updateTextbookStatus(textbook.id, newStatus, buyerId)
      
      // ÊïôÁßëÊõ∏„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setTextbook((prev: any) => prev ? { ...prev, status: newStatus, buyerId } : null)
      
      alert(newStatus === 'sold' ? 'ÊàêÁ¥ÑÊ∏à„Åø„Å´Â§âÊõ¥„Åó„Åæ„Åó„ÅüÔºÅ' : 'Âá∫ÂìÅ‰∏≠„Å´Êàª„Åó„Åæ„Åó„Åü')
    } catch (error) {
      console.error("„Çπ„ÉÜ„Éº„Çø„ÇπÂ§âÊõ¥„Ç®„É©„Éº:", error)
      alert("„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆÂ§âÊõ¥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    }
  }

  const handleSellToThisPerson = async () => {
    if (!user || !textbook || !conversation || !otherUser) return
    
    // Âá∫ÂìÅËÄÖ„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
    if (user.uid !== conversation.sellerId) {
      alert("Âá∫ÂìÅËÄÖ„ÅÆ„Åø„ÅåÂèñÂºïÁä∂Ê≥Å„ÇíÂ§âÊõ¥„Åß„Åç„Åæ„Åô")
      return
    }

    const isConfirmed = window.confirm(
      `${otherUser.name}„Åï„Çì„Å´Â£≤„Çä„Åæ„Åô„ÅãÔºü\n\nÁ¢∫ÂÆö„Åô„Çã„Å®Ôºö\n„ÉªÊïôÁßëÊõ∏„Åå„ÄåÂ£≤Âàá„Äç„Å´„Å™„Çä„Åæ„Åô\n„Éª‰ªñ„ÅÆË≥ºÂÖ•Â∏åÊúõËÄÖ„Å®„ÅÆ„ÇÑ„ÇäÂèñ„Çä„ÅØÁµÇ‰∫Ü„Åó„Åæ„Åô\n„Éª„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åô`
    )
    
    if (!isConfirmed) return

    try {
      // ÊïôÁßëÊõ∏„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„Çísold„Å´Êõ¥Êñ∞„Åó„ÄÅÂèñÂºïÁä∂ÊÖã„Çíin_progress„Å´Ë®≠ÂÆö
      const textbookRef = doc(db, "books", textbook.id)
      await updateDoc(textbookRef, {
        status: 'sold',
        buyerId: conversation.buyerId,
        transactionStatus: 'in_progress', // ÂèñÂºï‰∏≠
        soldAt: serverTimestamp(),
      })
      
      // ÊïôÁßëÊõ∏„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setTextbook((prev: any) => prev ? { 
        ...prev, 
        status: 'sold', 
        buyerId: conversation.buyerId,
        transactionStatus: 'in_progress'
      } : null)
      
      // ÊàêÁ¥ÑÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËá™ÂãïÈÄÅ‰ø°
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      await addDoc(messagesRef, {
        text: `üéâ ÊàêÁ¥ÑÂÆå‰∫ÜÔºÅ${otherUser.name}„Åï„Çì„Å®„ÅÆÂèñÂºï„ÅåÊàêÁ´ã„Åó„Åæ„Åó„Åü„ÄÇÂºï„ÅçÁ∂ö„Åç„É°„ÉÉ„Çª„Éº„Ç∏„ÅßË©≥Á¥∞„Çí„ÇÑ„ÇäÂèñ„Çä„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
        senderId: user.uid,
        createdAt: serverTimestamp(),
        isRead: false,
        isSystemMessage: true, // „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„Éï„É©„Ç∞
      })

      // Ë≥ºÂÖ•ËÄÖ„Å´ÂèñÂºïÊàêÁ´ãÈÄöÁü•„ÇíÈÄÅ‰ø°
      await createTransactionNotification(
        conversation.buyerId,
        textbook.title,
        true, // Ë≥ºÂÖ•ËÄÖÂêë„Åë
        conversationId as string
      )
      
      alert(`${otherUser.name}„Åï„Çì„Å®„ÅÆÂèñÂºï„ÅåÊàêÁ´ã„Åó„Åæ„Åó„ÅüÔºÅ`)
    } catch (error) {
      console.error("ÂèñÂºïÊàêÁ´ã„Ç®„É©„Éº:", error)
      alert("ÂèñÂºï„ÅÆÊàêÁ´ãÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    }
  }

  const handleReceiveComplete = async () => {
    if (!user || !textbook || !conversation || !otherUser) return
    
    // Ë≥ºÂÖ•ËÄÖ„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
    if (user.uid !== conversation.buyerId) {
      alert("Ë≥ºÂÖ•ËÄÖ„ÅÆ„Åø„ÅåÂèóÂèñÂÆå‰∫Ü„Åß„Åç„Åæ„Åô")
      return
    }

    const isConfirmed = window.confirm(
      "ÂïÜÂìÅ„ÇíÂèó„ÅëÂèñ„Çä„Åæ„Åó„Åü„ÅãÔºü\n\nÂèóÂèñÂÆå‰∫Ü„Åô„Çã„Å®Ôºö\n„ÉªÂèñÂºï„ÅåÂÆå‰∫Ü„Åó„Åæ„Åô\n„Éª„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì"
    )
    
    if (!isConfirmed) return

    try {
      // ÊïôÁßëÊõ∏„ÅÆÂèñÂºïÁä∂ÊÖã„Çícompleted„Å´Êõ¥Êñ∞
      const textbookRef = doc(db, "books", textbook.id)
      await updateDoc(textbookRef, {
        transactionStatus: 'completed',
        completedAt: serverTimestamp(),
      })
      
      // ÊïôÁßëÊõ∏„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setTextbook((prev: any) => prev ? { 
        ...prev, 
        transactionStatus: 'completed'
      } : null)
      
      // ÂèóÂèñÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËá™ÂãïÈÄÅ‰ø°
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      await addDoc(messagesRef, {
        text: `‚úÖ ${user.displayName || 'Ë≥ºÂÖ•ËÄÖ'}„Åï„Çì„ÅåÂïÜÂìÅ„ÇíÂèó„ÅëÂèñ„Çä„Åæ„Åó„Åü„ÄÇÂèñÂºïÂÆå‰∫Ü„Åß„ÅôÔºÅ„ÅäÁñ≤„ÇåÊßò„Åß„Åó„Åü„ÄÇ`,
        senderId: user.uid,
        createdAt: serverTimestamp(),
        isRead: false,
        isSystemMessage: true, // „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„Éï„É©„Ç∞
      })

      // Âá∫ÂìÅËÄÖ„Å´ÂèóÂèñÂÆå‰∫ÜÈÄöÁü•„ÇíÈÄÅ‰ø°
      await createReceiptNotification(
        textbook.userId, // Âá∫ÂìÅËÄÖID
        textbook.title,
        otherUser.name || "Ë≥ºÂÖ•ËÄÖ",
        conversationId as string
      )
      
      alert("ÂèóÂèñÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅÂèñÂºï„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ")
    } catch (error) {
      console.error("ÂèóÂèñÂÆå‰∫Ü„Ç®„É©„Éº:", error)
      alert("ÂèóÂèñÂÆå‰∫Ü„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    }
  }

  if (loading || authLoading) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <div className="flex items-center justify-center flex-1">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <header className="bg-white border-b shadow-sm">
        <div className="container mx-auto px-4 py-3">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" asChild>
              <Link href="/messages">
                <ArrowLeft className="h-4 w-4 mr-1" />
                Êàª„Çã
              </Link>
            </Button>
            
            <div className="flex items-center gap-3 flex-1">
              <Avatar className="h-10 w-10">
                <AvatarImage src={otherUser?.avatarUrl || "/placeholder.svg"} />
                <AvatarFallback className="bg-primary/10 text-primary">
                  {otherUser?.name?.charAt(0) || "U"}
                </AvatarFallback>
              </Avatar>
              
              <div className="flex-1">
                <h1 className="font-semibold text-lg">{otherUser?.name || "‰∏çÊòé„Å™„É¶„Éº„Ç∂„Éº"}</h1>
                {textbook && (
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <BookOpen className="h-3 w-3" />
                    <span className="truncate">{textbook.title}</span>
                  </div>
                )}
              </div>
              
              {conversation && (
                <Badge variant={conversation.buyerId === user?.uid ? 'default' : 'secondary'}>
                  {conversation.buyerId === user?.uid ? 'Ë≥ºÂÖ•Â∏åÊúõ' : 'Âá∫ÂìÅËÄÖ'}
                </Badge>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* ÊïôÁßëÊõ∏ÊÉÖÂ†±„Ç´„Éº„Éâ */}
      {textbook && (
        <div className="container mx-auto px-4 py-2">
          <Card className="bg-white">
            <CardContent className="p-3">
              <div className="flex items-center gap-2">
                <div className="w-12 h-16 bg-muted rounded overflow-hidden flex items-center justify-center">
                  <img 
                    src={(textbook.imageUrls && textbook.imageUrls[0]) || textbook.imageUrl || "/placeholder.svg"} 
                    alt={textbook.title}
                    className="w-full h-full object-contain"
                    style={{ objectFit: 'contain' }}
                  />
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="font-semibold text-sm truncate">{textbook.title}</h3>
                  <p className="text-xs text-muted-foreground">{textbook.author}</p>
                  <p className="text-xs text-muted-foreground">{textbook.university}</p>
                  <div className="flex items-center gap-2 mt-1">
                    <p className="text-sm font-bold text-primary">¬•{textbook.price?.toLocaleString()}</p>
                    <Badge variant={textbook.status === 'sold' ? 'destructive' : 'secondary'} className="text-xs">
                      {textbook.status === 'sold' ? 'Â£≤Âàá' : 'Ë≤©Â£≤‰∏≠'}
                    </Badge>
                  </div>
                </div>
                <Button variant="outline" size="sm" className="text-xs px-2 py-1 h-7" asChild>
                  <Link href={`/marketplace/${textbook.id}`}>Ë©≥Á¥∞</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
          
          {/* Âá∫ÂìÅËÄÖÂêë„ÅëÊàêÁ¥ÑÊ°àÂÜÖ„Éª„Éú„Çø„É≥ */}
          {conversation && user && user.uid === conversation.sellerId && (
            <Card className="bg-blue-50 border-blue-200 mt-2">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <h4 className="font-medium text-blue-900 text-sm">üìã Âá∫ÂìÅËÄÖ„É°„Éã„É•„Éº</h4>
                  {textbook?.status === 'sold' ? (
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <p className="text-xs text-green-800 font-medium">‚úÖ {otherUser?.name}„Åï„Çì„Å®„ÅÆÂèñÂºïÊàêÁ´ãÊ∏à„Åø</p>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        className="border-green-300 text-green-700 hover:bg-green-50 text-xs px-2 py-1 h-7"
                        onClick={() => handleStatusChange('available')}
                      >
                        <RotateCcw className="mr-1 h-3 w-3" />
                        Âá∫ÂìÅ‰∏≠„Å´Êàª„Åô
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-2">
                      <p className="text-xs text-blue-800">„Åì„ÅÆ‰∫∫„Å®„ÅÆÂèñÂºï„ÇíÊ±∫ÂÆö„Åô„ÇãÂ†¥Âêà</p>
                      <div className="flex gap-2">
                        <Button
                          variant="default"
                          size="sm"
                          className="bg-green-600 hover:bg-green-700 text-white text-xs px-3 py-1 h-7"
                          onClick={handleSellToThisPerson}
                        >
                          <CheckCircle className="mr-1 h-3 w-3" />
                          {otherUser?.name}„Åï„Çì„Å´Â£≤„Çã
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          className="border-gray-300 text-gray-700 hover:bg-gray-50 text-xs px-2 py-1 h-7"
                          onClick={() => handleStatusChange('sold')}
                        >
                          ‰ªñ„ÅÆ‰∫∫„Å´Â£≤„Å£„Åü
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Ë≥ºÂÖ•ËÄÖÂêë„ÅëÊàêÁ¥ÑÂÆå‰∫ÜË°®Á§∫ */}
          {conversation && user && user.uid === conversation.buyerId && textbook?.status === 'sold' && textbook?.buyerId === user.uid && (
            <Card className="bg-green-50 border-green-200 mt-2">
              <CardContent className="p-3">
                {textbook?.transactionStatus === 'completed' ? (
                  <div className="text-center">
                    <h4 className="font-medium text-green-900 text-sm mb-1">‚úÖ ÂèñÂºïÂÆå‰∫Ü</h4>
                    <p className="text-xs text-green-800">
                      ÂèñÂºï„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„ÅüÔºÅ
                    </p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    <h4 className="font-medium text-green-900 text-sm">üéâ ÂèñÂºïÊàêÁ´ãÔºÅ</h4>
                    <p className="text-xs text-green-800 mb-2">
                      „ÅÇ„Å™„Åü„Å®„ÅÆÂèñÂºï„ÅåÊàêÁ´ã„Åó„Åæ„Åó„Åü„ÄÇÂïÜÂìÅ„ÇíÂèó„ÅëÂèñ„Å£„Åü„Çâ‰∏ã„ÅÆ„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                    </p>
                    <Button
                      variant="default"
                      size="sm"
                      className="bg-blue-600 hover:bg-blue-700 text-white text-xs px-3 py-1 h-7 w-full"
                      onClick={handleReceiveComplete}
                    >
                      üì¶ Âèó„ÅëÂèñ„Å£„Åü
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      )}

      {/* „É°„ÉÉ„Çª„Éº„Ç∏„Ç®„É™„Ç¢ */}
      <main className="flex-1 container mx-auto px-4 py-2 overflow-y-auto min-h-0">
        <div className="space-y-3 max-w-3xl mx-auto">
          {messages.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-muted-foreground">„Åæ„Å†„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
              <p className="text-sm text-muted-foreground">ÊúÄÂàù„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ„Å£„Å¶„Åø„Åæ„Åó„Çá„ÅÜ</p>
            </div>
          ) : (
            messages.map((msg) => {
              const isCurrentUser = msg.senderId === user?.uid
              const userProfile = isCurrentUser ? currentUserProfile : otherUser
              const isSystemMessage = msg.isSystemMessage
              
              // „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂ†¥Âêà
              if (isSystemMessage) {
                return (
                  <div key={msg.id} className="flex justify-center my-4">
                    <div className="bg-green-50 border border-green-200 rounded-lg p-3 max-w-[80%]">
                      <p className="text-sm text-green-800 text-center font-medium">{msg.text}</p>
                      <div className="flex items-center justify-center gap-1 mt-1 text-xs text-green-600">
                        <Clock className="h-3 w-3" />
                        {msg.createdAt?.toDate?.() ? (
                          msg.createdAt.toDate().toLocaleString('ja-JP', { 
                            month: 'numeric', 
                            day: 'numeric', 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })
                        ) : "ÈÄÅ‰ø°‰∏≠..."}
                      </div>
                    </div>
                  </div>
                )
              }
              
              return (
                <div
                  key={msg.id}
                  className={`flex gap-2 ${isCurrentUser ? 'justify-end' : 'justify-start'}`}
                >
                  {!isCurrentUser && (
                    <Avatar className="h-8 w-8 mt-1">
                      <AvatarImage src={userProfile?.avatarUrl || "/placeholder.svg"} />
                      <AvatarFallback className="bg-muted text-xs">
                        {userProfile?.name?.charAt(0) || "U"}
                      </AvatarFallback>
                    </Avatar>
                  )}
                  
                  <div className={`max-w-[70%] ${isCurrentUser ? 'text-right' : 'text-left'}`}>
                    <div className={`text-xs text-muted-foreground mb-1 ${isCurrentUser ? 'text-right' : 'text-left'}`}>
                      {userProfile?.name || (isCurrentUser ? "„ÅÇ„Å™„Åü" : "‰∏çÊòé")}
                    </div>
                    <div
                      className={`p-3 rounded-2xl ${
                        isCurrentUser
                          ? "bg-primary text-primary-foreground"
                          : "bg-white border shadow-sm"
                      }`}
                    >
                      <p className="text-sm">{msg.text}</p>
                      <div className={`flex items-center gap-1 mt-1 text-xs ${
                        isCurrentUser ? 'text-primary-foreground/70 justify-end' : 'text-muted-foreground justify-start'
                      }`}>
                        <Clock className="h-3 w-3" />
                        {msg.createdAt?.toDate?.() ? (
                          msg.createdAt.toDate().toLocaleString('ja-JP', { 
                            month: 'numeric', 
                            day: 'numeric', 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })
                        ) : "ÈÄÅ‰ø°‰∏≠..."}
                      </div>
                    </div>
                  </div>
                  
                  {isCurrentUser && (
                    <Avatar className="h-8 w-8 mt-1">
                      <AvatarImage src={userProfile?.avatarUrl || "/placeholder.svg"} />
                      <AvatarFallback className="bg-primary/10 text-primary text-xs">
                        {userProfile?.name?.charAt(0) || "U"}
                      </AvatarFallback>
                    </Avatar>
                  )}
                </div>
              )
            })
          )}
        </div>
      </main>

      {/* „É°„ÉÉ„Çª„Éº„Ç∏ÂÖ•Âäõ„Ç®„É™„Ç¢ */}
      <footer className="bg-white border-t flex-shrink-0">
        <div className="container mx-auto px-4 py-2">
          <div className="flex gap-2 max-w-3xl mx-auto">
            <Input
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ..."
              onKeyPress={(e) => e.key === 'Enter' && handleSend()}
              className="flex-1 h-9"
            />
            <Button onClick={handleSend} disabled={!newMessage.trim()} size="sm" className="h-9">
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </footer>
    </div>
  )
}
