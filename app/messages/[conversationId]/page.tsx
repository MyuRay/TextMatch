"use client"

import { useEffect, useState, useRef } from "react"
import { useParams, useRouter } from "next/navigation"
import { db } from "@/lib/firebaseConfig"
import {
  collection,
  addDoc,
  query,
  orderBy,
  onSnapshot,
  serverTimestamp,
  doc,
  getDoc,
  updateDoc,
  where,
  getDocs,
} from "firebase/firestore"
import { useAuth } from "@/lib/useAuth"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Send, User, BookOpen, Clock, CheckCircle, RotateCcw, CreditCard, Flag, AlertTriangle } from "lucide-react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Checkbox } from "@/components/ui/checkbox"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import Link from "next/link"
import { getUserProfile, getTextbookById, updateTextbookStatus } from "@/lib/firestore"
import { sendEmailNotification, createMessageNotificationEmail } from "@/lib/emailService"
import { createMessageNotification, createTransactionNotification, createReceiptNotification } from "@/lib/notifications"
import { sendPushNotification } from "@/lib/fcm"
import { Header } from "../../components/header"
import { OfficialIcon } from "../../components/official-badge"
import StripePaymentForm from "@/components/stripe-payment-form"

export default function ConversationPage() {
  const { conversationId } = useParams()
  const [messages, setMessages] = useState<any[]>([])
  const [newMessage, setNewMessage] = useState("")
  const [conversation, setConversation] = useState<any>(null)
  const [otherUser, setOtherUser] = useState<{name: string, avatarUrl?: string, isOfficial?: boolean, officialType?: string}>({name: ""})
  const [currentUserProfile, setCurrentUserProfile] = useState<{name: string, avatarUrl?: string, isOfficial?: boolean, officialType?: string}>({name: ""})
  const [otherUserId, setOtherUserId] = useState<string>("")
  const [textbook, setTextbook] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [showPaymentConfirm, setShowPaymentConfirm] = useState(false)
  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false)
  const [clientSecret, setClientSecret] = useState<string | null>(null)
  const [paymentLoading, setPaymentLoading] = useState(false)
  const [showReportDialog, setShowReportDialog] = useState(false)
  const [reportReason, setReportReason] = useState("")
  const [reportDetails, setReportDetails] = useState("")
  const [agreedToReport, setAgreedToReport] = useState(false)
  const [reportSubmitting, setReportSubmitting] = useState(false)
  const { user, loading: authLoading } = useAuth()
  const router = useRouter()
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const messagesContainerRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    let unsubscribe: (() => void) | null = null

    const loadConversationData = async () => {
      if (!user) {
        router.push("/login")
        return
      }
      
      try {
        // ‰ºöË©±„Éá„Éº„Çø„ÇíÂèñÂæó
        const convDoc = await getDoc(doc(db, "conversations", conversationId as string))
        if (!convDoc.exists()) {
          router.push("/messages")
          return
        }
        
        const convData = convDoc.data()
        setConversation(convData)
        
        // Áõ∏Êâã„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Å®ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
        const otherUserId = convData.buyerId === user.uid ? convData.sellerId : convData.buyerId
        const [otherUserProfile, currentProfile, textbookData] = await Promise.all([
          getUserProfile(otherUserId),
          getUserProfile(user.uid),
          getTextbookById(convData.bookId)
        ])
        
        setOtherUserId(otherUserId)
        setOtherUser(otherUserProfile || {name: "‰∏çÊòé„Å™„É¶„Éº„Ç∂„Éº"})
        setCurrentUserProfile(currentProfile || {name: "„ÅÇ„Å™„Åü"})
        setTextbook(textbookData)
        
        // Êú™Ë™≠„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊó¢Ë™≠„Å´„Åô„Çã
        await markMessagesAsRead()
        
        // „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Áõ£Ë¶ñ
        const messagesRef = collection(db, "conversations", conversationId as string, "messages")
        const q = query(messagesRef, orderBy("createdAt"))

        unsubscribe = onSnapshot(q, async (snapshot) => {
          const msgs = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))
          setMessages(msgs)
          setLoading(false)
          
          // Êñ∞„Åó„ÅÑÊú™Ë™≠„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çå„Å∞Êó¢Ë™≠„Å´„Åô„Çã
          await markMessagesAsRead()
        }, (error) => {
          console.error("„É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæó„Ç®„É©„Éº:", error)
          setLoading(false)
        })
      } catch (error) {
        console.error("‰ºöË©±„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:", error)
        setLoading(false)
      }
    }
    
    if (!authLoading) {
      loadConversationData()
    }

    return () => {
      if (unsubscribe) {
        unsubscribe()
      }
    }
  }, [conversationId, user, authLoading, router])

  const markMessagesAsRead = async () => {
    if (!user || !conversationId) return
    
    try {
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      const snapshot = await getDocs(messagesRef)
      
      // Ëá™ÂàÜ‰ª•Â§ñ„Åã„ÇâÈÄÅ‰ø°„Åï„Çå„Åü„É°„ÉÉ„Çª„Éº„Ç∏„Åß„ÄÅisRead„Ååfalse„Åæ„Åü„ÅØÊú™Ë®≠ÂÆö„ÅÆ„ÇÇ„ÅÆ„ÇíÊó¢Ë™≠„Å´„Åô„Çã
      const updatePromises = snapshot.docs
        .filter(messageDoc => {
          const data = messageDoc.data()
          return data.senderId !== user.uid && (data.isRead === false || data.isRead === undefined)
        })
        .map(messageDoc => 
          updateDoc(doc(db, "conversations", conversationId as string, "messages", messageDoc.id), {
            isRead: true
          })
        )
      
      await Promise.all(updatePromises)
    } catch (error) {
      console.error("„É°„ÉÉ„Çª„Éº„Ç∏Êó¢Ë™≠Êõ¥Êñ∞„Ç®„É©„Éº:", error)
    }
  }

  // „É°„ÉÉ„Çª„Éº„Ç∏„Çí‰∏ÄÁï™‰∏ã„Å´„Çπ„ÇØ„É≠„Éº„É´„Åô„ÇãÈñ¢Êï∞
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  // „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„Å®„Åç„Å´Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´
  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const [isSending, setIsSending] = useState(false)

  const handleSend = async () => {
    if (!newMessage.trim() || !user || isSending) return

    console.log("üîÑ „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÈñãÂßã...")
    setIsSending(true)
    
    const messageToSend = newMessage
    setNewMessage("") // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°Ââç„Å´ÂÖ•ÂäõÊ¨Ñ„Çí„ÇØ„É™„Ç¢
    
    // Textarea„ÅÆÈ´ò„Åï„Çí„É™„Çª„ÉÉ„Éà
    const textarea = document.querySelector('textarea')
    if (textarea) {
      textarea.style.height = 'auto'
    }

    try {
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      await addDoc(messagesRef, {
        text: messageToSend,
        senderId: user.uid,
        createdAt: serverTimestamp(),
        isRead: false,
      })
      
      // „É°„Éº„É´ÈÄöÁü•„ÇíÈÄÅ‰ø°
      try {
        await sendMessageNotification(messageToSend)
      } catch (error) {
        console.error("„É°„Éº„É´ÈÄöÁü•„Ç®„É©„Éº:", error)
      }
      
      // Áµ±Âêà„Åï„Çå„ÅüÈÄöÁü•„ÇíÈÄÅ‰ø°Ôºà„Éó„ÉÉ„Ç∑„É•ÈÄöÁü• + „Ç¢„Éó„É™ÂÜÖÈÄöÁü•Ôºâ
      try {
        await sendUnifiedNotification(messageToSend)
      } catch (error) {
        console.error("Áµ±ÂêàÈÄöÁü•„Ç®„É©„Éº:", error)
      }
      
      // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°Âæå„ÄÅÂ∞ë„ÅóÈÅÖ„Çå„Å¶„Çπ„ÇØ„É≠„Éº„É´
      setTimeout(() => {
        scrollToBottom()
      }, 100)
      
      console.log("‚úÖ „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°ÂÆå‰∫Ü")
    } catch (error) {
      console.error("‚ùå „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº:", error)
      alert("„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
      setNewMessage(messageToSend) // „Ç®„É©„ÉºÊôÇ„ÅØÂÖÉ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂæ©ÂÖÉ
    } finally {
      setIsSending(false) // ÈÄÅ‰ø°Áä∂ÊÖã„ÇíËß£Èô§
      console.log("üîì ÈÄÅ‰ø°„É≠„ÉÉ„ÇØËß£Èô§")
    }
  }

  const sendMessageNotification = async (messageText: string) => {
    try {
      if (!conversation || !textbook || !user) return

      // Âèó‰ø°ËÄÖ„ÇíÁâπÂÆöÔºàÈÄÅ‰ø°ËÄÖ„Åß„Å™„ÅÑÊñπÔºâ
      let recipientId = null
      if (conversation.buyerId === user.uid) {
        recipientId = conversation.sellerId
      } else if (conversation.sellerId === user.uid) {
        recipientId = conversation.buyerId
      }
      
      if (!recipientId || recipientId === user.uid) return
      
      // Âèó‰ø°ËÄÖ„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó
      const recipientDoc = await getDoc(doc(db, "users", recipientId))
      if (!recipientDoc.exists()) return

      const recipientData = recipientDoc.data()
      const recipientEmail = recipientData.email
      const recipientName = recipientData.fullName || "„É¶„Éº„Ç∂„Éº"

      // ÈÄÅ‰ø°ËÄÖ„ÅÆÂêçÂâç
      const senderName = currentUserProfile.name || "„É¶„Éº„Ç∂„Éº"

      // „É°„ÉÉ„Çª„Éº„Ç∏„Éó„É¨„Éì„É•„ÉºÔºàÊúÄÂàù„ÅÆ50ÊñáÂ≠óÔºâ
      const messagePreview = messageText.length > 50 
        ? messageText.substring(0, 50) + "..." 
        : messageText

      // „É°„Éº„É´ÂÜÖÂÆπ„Çí‰ΩúÊàê
      const emailNotification = createMessageNotificationEmail(
        recipientName,
        senderName,
        textbook.title,
        messagePreview
      )

      // Âèó‰ø°ËÄÖ„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíË®≠ÂÆö
      emailNotification.to = recipientEmail

      // „É°„Éº„É´ÈÄÅ‰ø°
      await sendEmailNotification(emailNotification)
    } catch (error) {
      console.error("„É°„Éº„É´ÈÄöÁü•ÈÄÅ‰ø°„Ç®„É©„Éº:", error)
      // „É°„Éº„É´ÈÄÅ‰ø°„Ç®„É©„Éº„Åß„ÇÇ„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÅØÁ∂ôÁ∂ö
    }
  }

  // Áµ±ÂêàÈÄöÁü•Èñ¢Êï∞Ôºà„Éó„ÉÉ„Ç∑„É•ÈÄöÁü• + „Ç¢„Éó„É™ÂÜÖÈÄöÁü•„ÇíÂêåÊôÇÂÆüË°å„Åó„ÄÅÈáçË§á„ÇíÈò≤„ÅêÔºâ
  const sendUnifiedNotification = async (messageText: string) => {
    const callId = Date.now()
    console.log(`üîî [${callId}] Áµ±ÂêàÈÄöÁü•ÈñãÂßã - „É°„ÉÉ„Çª„Éº„Ç∏: "${messageText.substring(0, 20)}..."`)
    
    try {
      if (!conversation || !textbook || !user) return

      // Âèó‰ø°ËÄÖ„ÇíÁâπÂÆöÔºàÈÄÅ‰ø°ËÄÖ„Åß„Å™„ÅÑÊñπÔºâ
      let recipientId = null
      if (conversation.buyerId === user.uid) {
        recipientId = conversation.sellerId
      } else if (conversation.sellerId === user.uid) {
        recipientId = conversation.buyerId
      }
      
      if (!recipientId || recipientId === user.uid) return
      
      console.log(`üì§ [${callId}] ÈÄÅ‰ø°ÂÖà: ${recipientId}, ÈÄÅ‰ø°ËÄÖ: ${user.uid}`)
      
      // ÈÄÅ‰ø°ËÄÖ„ÅÆÂêçÂâç
      const senderName = currentUserProfile.name || "„É¶„Éº„Ç∂„Éº"
      
      // „É°„ÉÉ„Çª„Éº„Ç∏„Éó„É¨„Éì„É•„ÉºÔºàÊúÄÂàù„ÅÆ30ÊñáÂ≠óÔºâ
      const messagePreview = messageText.length > 30 
        ? messageText.substring(0, 30) + "..." 
        : messageText

      // ÈÄöÁü•„Éá„Éº„Çø
      const notificationData = {
        type: 'message',
        conversationId: conversationId as string,
        bookId: textbook.id,
        bookTitle: textbook.title,
        recipientId
      }

      // „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„Å®„Ç¢„Éó„É™ÂÜÖÈÄöÁü•„Çí‰∏¶Ë°åÂÆüË°åÔºà„Åü„Å†„ÅóÈáçË§áÈò≤Ê≠¢„ÅÆ„Åü„ÇÅ„Çø„Ç∞„ÇíÂÖ±ÊúâÔºâ
      console.log(`üöÄ [${callId}] „Éó„ÉÉ„Ç∑„É•ÈÄöÁü• & „Ç¢„Éó„É™ÂÜÖÈÄöÁü•ÈÄÅ‰ø°ÈñãÂßã`)
      
      const results = await Promise.allSettled([
        // „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•
        sendPushNotification(
          recipientId,
          `${senderName}„Åã„Çâ„É°„ÉÉ„Çª„Éº„Ç∏`,
          `${textbook.title}: ${messagePreview}`,
          notificationData
        ),
        // „Ç¢„Éó„É™ÂÜÖÈÄöÁü•
        createMessageNotification(
          recipientId,
          senderName,
          textbook.title,
          conversationId as string
        )
      ])
      
      console.log(`‚úÖ [${callId}] ÈÄöÁü•ÈÄÅ‰ø°ÂÆå‰∫Ü - ÁµêÊûú:`, results.map(r => r.status))

    } catch (error) {
      console.error(`‚ùå [${callId}] Áµ±ÂêàÈÄöÁü•ÈÄÅ‰ø°„Ç®„É©„Éº:`, error)
      // ÈÄöÁü•„Ç®„É©„Éº„Åß„ÇÇ„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„ÅØÁ∂ôÁ∂ö
    }
  }


  const handleStatusChange = async (newStatus: 'available' | 'sold') => {
    if (!user || !textbook || !conversation) return
    
    // Âá∫ÂìÅËÄÖ„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
    if (user.uid !== conversation.sellerId) {
      alert("Âá∫ÂìÅËÄÖ„ÅÆ„Åø„ÅåÂèñÂºïÁä∂Ê≥Å„ÇíÂ§âÊõ¥„Åß„Åç„Åæ„Åô")
      return
    }
    
    try {
      const buyerId = newStatus === 'sold' ? conversation.buyerId : undefined
      await updateTextbookStatus(textbook.id, newStatus, buyerId)
      
      // ÊïôÁßëÊõ∏„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setTextbook((prev: any) => prev ? { ...prev, status: newStatus, buyerId } : null)
      
      alert(newStatus === 'sold' ? 'ÊàêÁ¥ÑÊ∏à„Åø„Å´Â§âÊõ¥„Åó„Åæ„Åó„ÅüÔºÅ' : 'Âá∫ÂìÅ‰∏≠„Å´Êàª„Åó„Åæ„Åó„Åü')
    } catch (error) {
      console.error("„Çπ„ÉÜ„Éº„Çø„ÇπÂ§âÊõ¥„Ç®„É©„Éº:", error)
      alert("„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆÂ§âÊõ¥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    }
  }

  const handleSellToThisPerson = async () => {
    if (!user || !textbook || !conversation || !otherUser) return
    
    // Âá∫ÂìÅËÄÖ„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
    if (user.uid !== conversation.sellerId) {
      alert("Âá∫ÂìÅËÄÖ„ÅÆ„Åø„ÅåÂèñÂºïÁä∂Ê≥Å„ÇíÂ§âÊõ¥„Åß„Åç„Åæ„Åô")
      return
    }

    const isConfirmed = window.confirm(
      `${otherUser.name}„Åï„Çì„Å´Â£≤„Çä„Åæ„Åô„ÅãÔºü\n\nÁ¢∫ÂÆö„Åô„Çã„Å®Ôºö\n„ÉªÊïôÁßëÊõ∏„Åå„ÄåÂ£≤Âàá„Äç„Å´„Å™„Çä„Åæ„Åô\n„Éª‰ªñ„ÅÆË≥ºÂÖ•Â∏åÊúõËÄÖ„Å®„ÅÆ„ÇÑ„ÇäÂèñ„Çä„ÅØÁµÇ‰∫Ü„Åó„Åæ„Åô\n„Éª„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åô`
    )
    
    if (!isConfirmed) return

    try {
      // ‰ºöË©±„É¨„Éô„É´„Åß„ÅÆÂèñÂºïÁä∂ÊÖã„ÇíÊõ¥Êñ∞ÔºàÊïôÁßëÊõ∏Ëá™‰Ωì„ÅÆÁä∂ÊÖã„ÅØÂ§âÊõ¥„Åó„Å™„ÅÑÔºâ
      const conversationRef = doc(db, "conversations", conversationId as string)
      await updateDoc(conversationRef, {
        transactionStatus: 'selected', // „Åì„ÅÆ‰ºöË©±„ÅßÂèñÂºïÁõ∏Êâã„ÅåÈÅ∏Êäû„Åï„Çå„Åü
        selectedAt: serverTimestamp(),
      })
      
      // ‰ºöË©±„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setConversation((prev: any) => prev ? { 
        ...prev, 
        transactionStatus: 'selected'
      } : null)
      
      // ÊàêÁ¥ÑÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËá™ÂãïÈÄÅ‰ø°
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      await addDoc(messagesRef, {
        text: `üéâ ÂèñÂºïÁõ∏ÊâãÊ±∫ÂÆöÔºÅ${otherUser.name}„Åï„Çì„Å®„ÅÆÂèñÂºï„ÅåÊàêÁ´ã„Åó„Åæ„Åó„Åü„ÄÇ${otherUser.name}„Åï„Çì„ÅØÊ±∫Ê∏à„Éú„Çø„É≥„ÅßÊîØÊâï„ÅÑ„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
        senderId: user.uid,
        createdAt: serverTimestamp(),
        isRead: false,
        isSystemMessage: true, // „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„Éï„É©„Ç∞
      })

      // Ë≥ºÂÖ•ËÄÖ„Å´ÂèñÂºïÊàêÁ´ãÈÄöÁü•„ÇíÈÄÅ‰ø°
      await createTransactionNotification(
        conversation.buyerId,
        textbook.title,
        true, // Ë≥ºÂÖ•ËÄÖÂêë„Åë
        conversationId as string
      )
      
      alert(`${otherUser.name}„Åï„Çì„Å®„ÅÆÂèñÂºï„ÅåÊàêÁ´ã„Åó„Åæ„Åó„ÅüÔºÅ`)
    } catch (error) {
      console.error("ÂèñÂºïÊàêÁ´ã„Ç®„É©„Éº:", error)
      alert("ÂèñÂºï„ÅÆÊàêÁ´ãÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    }
  }

  const handlePayment = async () => {
    if (!user || !textbook || !conversation || !otherUser) {
      alert("ÂøÖË¶Å„Å™ÊÉÖÂ†±„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô")
      return
    }
    
    // Ë≥ºÂÖ•ËÄÖ„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
    if (user.uid !== conversation.buyerId) {
      alert("Ë≥ºÂÖ•ËÄÖ„ÅÆ„Åø„ÅåÊ±∫Ê∏à„Åß„Åç„Åæ„Åô")
      return
    }

    // ‰æ°Ê†º„ÅÆÂ¶•ÂΩìÊÄßÁ¢∫Ë™ç
    if (!textbook.price || textbook.price <= 0) {
      alert("ÁÑ°Âäπ„Å™‰æ°Ê†º„Åß„Åô")
      return
    }

    setPaymentLoading(true)
    try {
      // Âá∫ÂìÅËÄÖ„ÅÆStripe ConnectÊÉÖÂ†±„ÇíÁ¢∫Ë™ç
      const sellerProfile = await getUserProfile(conversation.sellerId)
      if (!sellerProfile?.stripeAccountId) {
        alert("Âá∫ÂìÅËÄÖ„ÅåStripe Connect„ÅÆË®≠ÂÆö„ÇíÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ\nÁõ¥Êé•„ÇÑ„ÇäÂèñ„Çä„Åó„Å¶ÁèæÈáëÂèñÂºï„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        return
      }

      console.log('Payment Intent‰ΩúÊàêÈñãÂßã:', {
        amount: textbook.price,
        sellerAccountId: sellerProfile.stripeAccountId,
        textbookId: textbook.id,
        buyerId: user.uid
      })

      const response = await fetch('/api/stripe/payment-intent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: textbook.price, // JPY„ÅØÂÜÜÂçò‰Ωç„ÅÆ„Åü„ÇÅÂ§âÊèõ‰∏çË¶Å
          connectedAccountId: sellerProfile.stripeAccountId,
          textbookId: textbook.id,
          buyerId: user.uid,
        }),
      })
      
      const data = await response.json()
      console.log('Payment Intent Response:', data)
      
      if (response.ok && data.client_secret) {
        setClientSecret(data.client_secret)
        setPaymentDialogOpen(true)
      } else {
        const errorMessage = data.error || 'Payment Intent‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
        console.error('Payment Intent Error:', errorMessage)
        alert('Ê±∫Ê∏à„ÅÆÊ∫ñÂÇô„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + errorMessage)
      }
    } catch (error) {
      console.error('Payment intent creation error:', error)
      alert('Ê±∫Ê∏à„ÅÆÊ∫ñÂÇô‰∏≠„Å´„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
    } finally {
      setPaymentLoading(false)
    }
  }

  const handlePaymentSuccess = async () => {
    setPaymentDialogOpen(false)
    
    try {
      console.log("üîÑ Ê±∫Ê∏àÂÆå‰∫ÜÂá¶ÁêÜÈñãÂßã")
      console.log("ÊïôÁßëÊõ∏ID:", textbook.id)
      console.log("Ë≥ºÂÖ•ËÄÖID:", conversation.buyerId)
      
      // ‰ºöË©±„ÅÆÂèñÂºïÁä∂ÊÖã„Çípaid„Å´Êõ¥Êñ∞
      const conversationRef = doc(db, "conversations", conversationId as string)
      await updateDoc(conversationRef, {
        transactionStatus: 'paid', // Ê±∫Ê∏àÂÆå‰∫Ü
        paidAt: serverTimestamp(),
      })
      console.log("‚úÖ ‰ºöË©±„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞ÂÆå‰∫Ü")
      
      // ÊïôÁßëÊõ∏„ÅÆÁä∂ÊÖã„Çísold„Å´Êõ¥Êñ∞„Åó„ÄÅÂèñÂºïÁä∂ÊÖã„ÇÇpaid„Å´Êõ¥Êñ∞
      const textbookRef = doc(db, "books", textbook.id)
      await updateDoc(textbookRef, {
        status: 'sold', // Ê±∫Ê∏àÂÆå‰∫ÜÊôÇ„Å´Â£≤„ÇäÂàá„Çå„Å´„Åô„Çã
        buyerId: conversation.buyerId, // Ë≥ºÂÖ•ËÄÖID„ÇíË®≠ÂÆö
        transactionStatus: 'paid', // Ê±∫Ê∏àÂÆå‰∫Ü
        paidAt: serverTimestamp(),
      })
      console.log("‚úÖ ÊïôÁßëÊõ∏„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞ÂÆå‰∫Ü - status: sold")
      
      // ‰ºöË©±„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setConversation((prev: any) => prev ? { 
        ...prev, 
        transactionStatus: 'paid'
      } : null)
      
      // ÊïôÁßëÊõ∏„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setTextbook((prev: any) => prev ? { 
        ...prev, 
        status: 'sold',
        buyerId: conversation.buyerId,
        transactionStatus: 'paid'
      } : null)
      console.log("‚úÖ „É≠„Éº„Ç´„É´Áä∂ÊÖãÊõ¥Êñ∞ÂÆå‰∫Ü")
      
      // Ê±∫Ê∏àÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËá™ÂãïÈÄÅ‰ø°ÔºàÊúÄÊñ∞„ÅÆ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÇíÂèñÂæóÔºâ
      const currentUserDoc = await getDoc(doc(db, "users", user!.uid))
      const currentUserData = currentUserDoc.exists() ? currentUserDoc.data() : null
      const displayName = currentUserData?.nickname || currentUserData?.fullName || 'Ë≥ºÂÖ•ËÄÖ'
      
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      await addDoc(messagesRef, {
        text: `üí≥ ${displayName}„Åï„Çì„ÅåÊ±∫Ê∏à„ÇíÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÂïÜÂìÅ„ÅÆÂèó„ÅëÊ∏°„Åó„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
        senderId: user!.uid,
        createdAt: serverTimestamp(),
        isRead: false,
        isSystemMessage: true,
      })
      
      alert("Ê±∫Ê∏à„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅÂá∫ÂìÅËÄÖ„Å®Âèó„ÅëÊ∏°„Åó„ÅÆË©≥Á¥∞„ÇíÁõ∏Ë´á„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    } catch (error) {
      console.error("Ê±∫Ê∏àÂæåÂá¶ÁêÜ„Ç®„É©„Éº:", error)
      alert("Ê±∫Ê∏à„ÅØÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„Åå„ÄÅ„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")
    }
  }

  const handleReceiveComplete = async () => {
    if (!user || !textbook || !conversation || !otherUser) return
    
    // Ë≥ºÂÖ•ËÄÖ„ÅÆ„ÅøÂÆüË°åÂèØËÉΩ
    if (user.uid !== conversation.buyerId) {
      alert("Ë≥ºÂÖ•ËÄÖ„ÅÆ„Åø„ÅåÂèóÂèñÂÆå‰∫Ü„Åß„Åç„Åæ„Åô")
      return
    }

    const isConfirmed = window.confirm(
      "ÂïÜÂìÅ„ÇíÂèó„ÅëÂèñ„Çä„Åæ„Åó„Åü„ÅãÔºü\n\nÂèóÂèñÂÆå‰∫Ü„Åô„Çã„Å®Ôºö\n„ÉªÂèñÂºï„ÅåÂÆå‰∫Ü„Åó„Åæ„Åô\n„Éª„Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì"
    )
    
    if (!isConfirmed) return

    try {
      // ÊïôÁßëÊõ∏„ÅÆÁä∂ÊÖã„Çísold„Å´Êõ¥Êñ∞„Åó„ÄÅÂèñÂºïÂÆå‰∫ÜÁä∂ÊÖã„Å´Ë®≠ÂÆö
      const textbookRef = doc(db, "books", textbook.id)
      await updateDoc(textbookRef, {
        status: 'sold',
        buyerId: conversation.buyerId,
        transactionStatus: 'completed',
        completedAt: serverTimestamp(),
      })
      
      // ‰ºöË©±„ÅÆÂèñÂºïÁä∂ÊÖã„ÇÇÊõ¥Êñ∞
      const conversationRef = doc(db, "conversations", conversationId as string)
      await updateDoc(conversationRef, {
        transactionStatus: 'completed',
        completedAt: serverTimestamp(),
      })
      
      // ÊïôÁßëÊõ∏„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setTextbook((prev: any) => prev ? { 
        ...prev, 
        status: 'sold',
        buyerId: conversation.buyerId,
        transactionStatus: 'completed'
      } : null)
      
      // ‰ºöË©±„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
      setConversation((prev: any) => prev ? { 
        ...prev, 
        transactionStatus: 'completed'
      } : null)
      
      // ÂèóÂèñÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËá™ÂãïÈÄÅ‰ø°ÔºàÊúÄÊñ∞„ÅÆ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÇíÂèñÂæóÔºâ
      const currentUserDoc = await getDoc(doc(db, "users", user.uid))
      const currentUserData = currentUserDoc.exists() ? currentUserDoc.data() : null
      const displayName = currentUserData?.nickname || currentUserData?.fullName || 'Ë≥ºÂÖ•ËÄÖ'
      
      const messagesRef = collection(db, "conversations", conversationId as string, "messages")
      await addDoc(messagesRef, {
        text: `‚úÖ ${displayName}„Åï„Çì„ÅåÂïÜÂìÅ„ÇíÂèó„ÅëÂèñ„Çä„Åæ„Åó„Åü„ÄÇÂèñÂºïÂÆå‰∫Ü„Åß„ÅôÔºÅ„ÅäÁñ≤„ÇåÊßò„Åß„Åó„Åü„ÄÇ\n\nüìù „Çµ„Éº„Éì„ÇπÂêë‰∏ä„ÅÆ„Åü„ÇÅ„ÄÅ[„Ç¢„É≥„Ç±„Éº„Éà](https://docs.google.com/forms/d/e/1FAIpQLSdoNDHtDrD6pjIDhqL7sed1xCUe-7wtDcNGijirRfw3vZVpMg/viewform?usp=header)„Å´„ÅîÂçîÂäõ„Åè„Å†„Åï„ÅÑ`,
        senderId: user.uid,
        createdAt: serverTimestamp(),
        isRead: false,
        isSystemMessage: true, // „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„Éï„É©„Ç∞
      })

      // Âá∫ÂìÅËÄÖ„Å´ÂèóÂèñÂÆå‰∫ÜÈÄöÁü•„ÇíÈÄÅ‰ø°
      await createReceiptNotification(
        textbook.userId, // Âá∫ÂìÅËÄÖID
        textbook.title,
        otherUser.name || "Ë≥ºÂÖ•ËÄÖ",
        conversationId as string
      )
      
      alert("ÂèóÂèñÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅÂèñÂºï„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ")
    } catch (error) {
      console.error("ÂèóÂèñÂÆå‰∫Ü„Ç®„É©„Éº:", error)
      alert("ÂèóÂèñÂÆå‰∫Ü„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
    }
  }

  // ÈÄöÂ†±Âá¶ÁêÜ
  const handleReport = async () => {
    if (!reportReason || !agreedToReport) {
      alert("ÈÄöÂ†±ÁêÜÁî±„ÇíÈÅ∏Êäû„Åó„ÄÅÂà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
      return
    }

    setReportSubmitting(true)
    
    try {
      // ÈÄöÂ†±„Éá„Éº„Çø„Çí‰øùÂ≠ò
      const reportData = {
        reporterId: user!.uid,
        reportedUserId: otherUserId,
        conversationId: conversationId,
        textbookId: textbook?.id,
        reason: reportReason,
        details: reportDetails,
        reporterName: currentUserProfile.name,
        reportedUserName: otherUser.name,
        textbookTitle: textbook?.title,
        createdAt: serverTimestamp(),
        status: 'pending',
        reviewed: false
      }

      await addDoc(collection(db, "reports"), reportData)

      // ÁÆ°ÁêÜËÄÖ„Å´ÈÄöÁü•„ÇíÈÄÅ‰ø°
      const adminNotificationData = {
        type: 'user_report',
        title: 'Êñ∞„Åó„ÅÑÈÄöÂ†±„ÅåÂ±ä„Åç„Åæ„Åó„Åü',
        message: `${currentUserProfile.name}„Åï„Çì„Åã„Çâ${otherUser.name}„Åï„Çì„Å∏„ÅÆÈÄöÂ†±: ${reportReason}`,
        data: {
          reporterId: user!.uid,
          reportedUserId: otherUserId,
          conversationId: conversationId,
          reason: reportReason
        },
        createdAt: serverTimestamp(),
        isRead: false
      }

      await addDoc(collection(db, "admin_notifications"), adminNotificationData)

      alert("ÈÄöÂ†±„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„ÅÆ‰∏ä„ÄÅÈÅ©Âàá„Å´ÂØæÂøú„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ")
      setShowReportDialog(false)
      setReportReason("")
      setReportDetails("")
      setAgreedToReport(false)
    } catch (error) {
      console.error("ÈÄöÂ†±„Ç®„É©„Éº:", error)
      alert("ÈÄöÂ†±„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ")
    } finally {
      setReportSubmitting(false)
    }
  }

  if (loading || authLoading) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <div className="flex items-center justify-center flex-1">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <header className="bg-white border-b shadow-sm">
        <div className="container mx-auto px-4 py-3">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" asChild>
              <Link href="/messages">
                <ArrowLeft className="h-4 w-4 mr-1" />
                Êàª„Çã
              </Link>
            </Button>
            
            <div className="flex items-center gap-3 flex-1 min-w-0">
              <Link href={`/seller/${otherUserId}`}>
                <Avatar className="h-10 w-10 flex-shrink-0 cursor-pointer hover:opacity-80 transition-opacity">
                  <AvatarImage src={otherUser?.avatarUrl || "/placeholder.svg"} />
                  <AvatarFallback className="bg-primary/10 text-primary">
                    {otherUser?.name?.charAt(0) || "U"}
                  </AvatarFallback>
                </Avatar>
              </Link>
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 min-w-0">
                  <h1 className="font-semibold text-lg truncate">{otherUser?.name || "‰∏çÊòé„Å™„É¶„Éº„Ç∂„Éº"}</h1>
                  <OfficialIcon 
                    isOfficial={otherUser?.isOfficial} 
                    officialType={otherUser?.officialType as 'admin' | 'support' | 'team'} 
                  />
                </div>
                {textbook && (
                  <div className="flex items-center gap-2 text-sm text-muted-foreground min-w-0">
                    <BookOpen className="h-3 w-3 flex-shrink-0" />
                    <span className="truncate">{textbook.title}</span>
                  </div>
                )}
              </div>
              
              <div className="flex items-center gap-2 flex-shrink-0">
                {conversation && (
                  <Badge variant={conversation.buyerId === user?.uid ? 'default' : 'secondary'}>
                    {conversation.buyerId === user?.uid ? 'Ë≥ºÂÖ•Â∏åÊúõ' : 'Âá∫ÂìÅËÄÖ'}
                  </Badge>
                )}
                
                {/* ÈÄöÂ†±„Éú„Çø„É≥ */}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowReportDialog(true)}
                  className="text-red-600 border-red-200 hover:bg-red-50"
                >
                  <Flag className="h-4 w-4 mr-1" />
                  ÈÄöÂ†±
                </Button>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* ÊïôÁßëÊõ∏ÊÉÖÂ†±„Ç´„Éº„Éâ */}
      {textbook && (
        <div className="container mx-auto px-4 py-2">
          <Card className="bg-white">
            <CardContent className="p-3">
              <div className="flex items-center gap-2">
                <div className="w-12 h-16 bg-muted rounded overflow-hidden flex items-center justify-center">
                  <img 
                    src={(textbook.imageUrls && textbook.imageUrls[0]) || textbook.imageUrl || "/placeholder.svg"} 
                    alt={textbook.title}
                    className="w-full h-full object-contain"
                    style={{ objectFit: 'contain' }}
                  />
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="font-semibold text-sm line-clamp-2 break-words">{textbook.title}</h3>
                  {textbook.author && (
                    <p className="text-xs text-muted-foreground truncate">{textbook.author}</p>
                  )}
                  {textbook.university && (
                    <p className="text-xs text-muted-foreground truncate">{textbook.university}</p>
                  )}
                  <div className="flex items-center gap-2 mt-1">
                    <p className="text-sm font-bold text-primary">¬•{textbook.price?.toLocaleString()}</p>
                    <Badge variant={textbook.status === 'sold' ? 'destructive' : 'secondary'} className="text-xs">
                      {textbook.status === 'sold' ? 'Â£≤Âàá' : 'Ë≤©Â£≤‰∏≠'}
                    </Badge>
                  </div>
                </div>
                <Button variant="outline" size="sm" className="text-xs px-2 py-1 h-7" asChild>
                  <Link href={`/marketplace/${textbook.id}`}>Ë©≥Á¥∞</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Ë≥ºÂÖ•ËÄÖÂêë„ÅëË≤©Â£≤Ë®±ÂèØÂæÖ„Å°Ë°®Á§∫ - Âõ∫ÂÆö‰ΩçÁΩÆ */}
      {conversation && user && user.uid === conversation.buyerId && textbook?.status === 'available' && !conversation.transactionStatus && (
        <div className="sticky top-0 z-20 bg-white border-b shadow-sm">
          <div className="container mx-auto px-4 py-2">
            <Card className="bg-blue-50 border-blue-200">
              <CardContent className="p-3">
                <div className="relative">
                  <div className="space-y-2 pr-16">
                    <h4 className="font-medium text-blue-900 text-sm">üí¨ Ë≤©Â£≤Ë®±ÂèØÂæÖ„Å°</h4>
                    <p className="text-xs text-blue-800 mb-2">
                      Âá∫ÂìÅËÄÖ„Å®„ÅÆÁõ∏Ë´áÂæå„ÄÅË≤©Â£≤Ë®±ÂèØ„ÅåÂá∫„ÅüÂ†¥Âêà„Å´Ë≥ºÂÖ•„ÅåÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô„ÄÇ
                    </p>
                    <Button
                      variant="outline"
                      size="sm"
                      className="bg-gray-100 text-gray-500 border-gray-300 cursor-not-allowed text-xs px-3 py-1 h-7 w-full"
                      disabled={true}
                    >
                      <CreditCard className="mr-1 h-3 w-3" />
                      Ë≥ºÂÖ•„Åô„ÇãÔºàË®±ÂèØÂæÖ„Å°Ôºâ
                    </Button>
                  </div>
                  
                  {/* Âè≥‰∏ä„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
                  <div className="absolute top-0 right-0 flex gap-1">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setShowReportDialog(true)}
                      className="text-red-600 border-red-200 hover:bg-red-50 text-xs px-2 py-1 h-6"
                    >
                      <Flag className="h-3 w-3" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        if (window.confirm('Ë≥ºÂÖ•„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åô„ÅãÔºü\n\n„Åì„ÅÆ‰ºöË©±„Åã„ÇâÈÄÄÂá∫„Åó„ÄÅ‰ªñ„ÅÆÊïôÁßëÊõ∏„ÇíÊé¢„Åô„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ')) {
                          router.push('/marketplace')
                        }
                      }}
                      className="text-gray-600 border-gray-200 hover:bg-gray-50 text-xs px-2 py-1 h-6"
                    >
                      √ó
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      )}

      {textbook && (
        <div className="container mx-auto px-4">
          {/* Âá∫ÂìÅËÄÖÂêë„ÅëÊàêÁ¥ÑÊ°àÂÜÖ„Éª„Éú„Çø„É≥ */}
          {conversation && user && user.uid === conversation.sellerId && (
            <Card className="bg-blue-50 border-blue-200 mt-2">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <h4 className="font-medium text-blue-900 text-sm">üìã Âá∫ÂìÅËÄÖ„É°„Éã„É•„Éº</h4>
                  {conversation.transactionStatus === 'selected' || conversation.transactionStatus === 'paid' || conversation.transactionStatus === 'completed' ? (
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <p className="text-xs text-green-800 font-medium">‚úÖ {otherUser?.name}„Åï„Çì„Å®„ÅÆÂèñÂºïÊàêÁ´ãÊ∏à„Åø</p>
                      </div>
                      {conversation.transactionStatus === 'completed' ? (
                        <div className="text-center">
                          <p className="text-xs text-gray-600 mb-1">‚úÖ ÂèñÂºïÂÆå‰∫Ü</p>
                          <p className="text-xs text-gray-500">„Åì„ÅÆÂèñÂºï„ÅØÂÆå‰∫Ü„Åó„Åæ„Åó„Åü</p>
                        </div>
                      ) : conversation.transactionStatus === 'paid' ? (
                        <div className="text-center">
                          <p className="text-xs text-blue-800 mb-1">üì¶ ÂèóÂèñÂæÖ„Å°</p>
                          <p className="text-xs text-blue-600">Ë≥ºÂÖ•ËÄÖ„ÅåÂèóÂèñÂÆå‰∫Ü„ÇíË°å„ÅÜ„Åæ„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ</p>
                        </div>
                      ) : (
                        <div className="space-y-2">
                          <p className="text-xs text-blue-800 mb-1">üí≥ Ê±∫Ê∏àÂæÖ„Å°</p>
                          <p className="text-xs text-blue-600 mb-2">Ë≥ºÂÖ•ËÄÖ„ÅåÊ±∫Ê∏à„ÇíË°å„ÅÜ„Åæ„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ</p>
                          <Button
                            variant="outline"
                            size="sm"
                            className="border-orange-300 text-orange-700 hover:bg-orange-50 text-xs px-2 py-1 h-7 w-full"
                            onClick={async () => {
                              if (window.confirm('ÂèñÂºï„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Å¶Âá∫ÂìÅ‰∏≠„Å´Êàª„Åó„Åæ„Åô„ÅãÔºü')) {
                                try {
                                  // ‰ºöË©±„ÅÆÂèñÂºïÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                                  const conversationRef = doc(db, "conversations", conversationId as string)
                                  await updateDoc(conversationRef, {
                                    transactionStatus: null,
                                    selectedAt: null,
                                  })
                                  
                                  // ‰ºöË©±„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
                                  setConversation((prev: any) => prev ? { 
                                    ...prev, 
                                    transactionStatus: null
                                  } : null)
                                  
                                  // „Ç≠„É£„É≥„Çª„É´„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËá™ÂãïÈÄÅ‰ø°
                                  const messagesRef = collection(db, "conversations", conversationId as string, "messages")
                                  await addDoc(messagesRef, {
                                    text: `üì¢ „Ç∑„Çπ„ÉÜ„É†ÈÄöÁü•: Âá∫ÂìÅËÄÖ„ÅåÂèñÂºï„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü„ÄÇÂïÜÂìÅ„ÅØÂÜç„Å≥Âá∫ÂìÅ‰∏≠„ÅÆÁä∂ÊÖã„Å´Êàª„Çä„Åæ„Åó„Åü„ÄÇ`,
                                    senderId: "system",
                                    createdAt: serverTimestamp(),
                                    isRead: false,
                                    isSystemMessage: true
                                  })
                                  
                                  alert('Âá∫ÂìÅ‰∏≠„Å´Êàª„Åó„Åæ„Åó„Åü')
                                } catch (error) {
                                  console.error('ÂèñÂºï„Ç≠„É£„É≥„Çª„É´„Ç®„É©„Éº:', error)
                                  alert('ÂèñÂºï„ÅÆ„Ç≠„É£„É≥„Çª„É´„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
                                }
                              }
                            }}
                          >
                            <RotateCcw className="mr-1 h-3 w-3" />
                            Âá∫ÂìÅ‰∏≠„Å´Êàª„Åô
                          </Button>
                        </div>
                      )}
                    </div>
                  ) : textbook?.status === 'sold' && textbook?.buyerId !== conversation.buyerId ? (
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <p className="text-xs text-orange-800 font-medium">‚ö†Ô∏è ‰ªñ„ÅÆ‰∫∫„Å®ÂèñÂºïÊàêÁ´ãÊ∏à„Åø</p>
                      </div>
                      <p className="text-xs text-orange-600">„Åì„ÅÆÂïÜÂìÅ„ÅØ‰ªñ„ÅÆ‰∫∫„Å®„ÅÆÂèñÂºï„ÅåÊàêÁ´ã„Åó„Å¶„ÅÑ„Åæ„Åô</p>
                    </div>
                  ) : textbook?.status === 'sold' && textbook?.buyerId === conversation.buyerId ? (
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        {textbook?.transactionStatus === 'completed' ? (
                          <p className="text-xs text-green-800 font-medium">‚úÖ {otherUser?.name}„Åï„Çì„Å®„ÅÆÂèñÂºïÂÆå‰∫ÜÊ∏à„Åø</p>
                        ) : (
                          <p className="text-xs text-blue-800 font-medium">üì¶ {otherUser?.name}„Åï„Çì„Å®„ÅÆÂèñÂºïÈÄ≤Ë°å‰∏≠</p>
                        )}
                      </div>
                      {textbook?.transactionStatus === 'completed' ? (
                        <p className="text-xs text-green-600">„Åì„ÅÆÂèñÂºï„ÅØÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü</p>
                      ) : (
                        <p className="text-xs text-blue-600">ÂèóÂèñÂÆå‰∫Ü„Çí„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ</p>
                      )}
                    </div>
                  ) : (
                    <div className="space-y-2">
                      <p className="text-xs text-blue-800">„Åì„ÅÆ‰∫∫„Å®„ÅÆÂèñÂºï„ÇíÊ±∫ÂÆö„Åô„ÇãÂ†¥Âêà</p>
                      <div className="flex gap-2">
                        <Button
                          variant="default"
                          size="sm"
                          className="bg-green-600 hover:bg-green-700 text-white text-xs px-3 py-1 h-7"
                          onClick={handleSellToThisPerson}
                        >
                          <CheckCircle className="mr-1 h-3 w-3" />
                          {otherUser?.name}„Åï„Çì„Å´Â£≤„Çã
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          className="border-gray-300 text-gray-700 hover:bg-gray-50 text-xs px-2 py-1 h-7"
                          onClick={() => handleStatusChange('sold')}
                        >
                          ‰ªñ„ÅÆ‰∫∫„Å´Â£≤„Å£„Åü
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )}




          {/* Ë≥ºÂÖ•ËÄÖÂêë„ÅëÊ±∫Ê∏à„ÉªÂèóÂèñË°®Á§∫ */}
          {conversation && user && user.uid === conversation.buyerId && (conversation.transactionStatus === 'selected' || conversation.transactionStatus === 'paid' || conversation.transactionStatus === 'completed') && (
            <Card className="bg-green-50 border-green-200 mt-2">
              <CardContent className="p-3">
                {conversation.transactionStatus === 'completed' ? (
                  <div className="text-center">
                    <h4 className="font-medium text-green-900 text-sm mb-1">‚úÖ ÂèñÂºïÂÆå‰∫Ü</h4>
                    <p className="text-xs text-green-800">
                      ÂèñÂºï„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„ÅüÔºÅ
                    </p>
                  </div>
                ) : conversation.transactionStatus === 'paid' ? (
                  <div className="space-y-2">
                    <h4 className="font-medium text-green-900 text-sm">üí≥ Ê±∫Ê∏àÂÆå‰∫Ü</h4>
                    <p className="text-xs text-green-800 mb-2">
                      Ê±∫Ê∏à„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÂïÜÂìÅ„ÇíÂèó„ÅëÂèñ„Å£„Åü„Çâ‰∏ã„ÅÆ„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                    </p>
                    <Button
                      variant="default"
                      size="sm"
                      className="bg-blue-600 hover:bg-blue-700 text-white text-xs px-3 py-1 h-7 w-full"
                      onClick={handleReceiveComplete}
                    >
                      üì¶ Âèó„ÅëÂèñ„Å£„Åü
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-2">
                    <h4 className="font-medium text-green-900 text-sm">üéâ ÂèñÂºïÊàêÁ´ãÔºÅ</h4>
                    <p className="text-xs text-green-800 mb-2">
                      „ÅÇ„Å™„Åü„Å®„ÅÆÂèñÂºï„ÅåÊàêÁ´ã„Åó„Åæ„Åó„Åü„ÄÇÊ±∫Ê∏à„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                    </p>
                    <Dialog open={paymentDialogOpen} onOpenChange={setPaymentDialogOpen}>
                      <DialogTrigger asChild>
                        <Button
                          variant="default"
                          size="sm"
                          className="bg-blue-600 hover:bg-blue-700 text-white text-xs px-3 py-1 h-7 w-full"
                          onClick={handlePayment}
                          disabled={paymentLoading}
                        >
                          <CreditCard className="mr-1 h-3 w-3" />
                          {paymentLoading ? 'Ê∫ñÂÇô‰∏≠...' : `¬•${textbook.price?.toLocaleString()}„ÅßÊ±∫Ê∏à`}
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="sm:max-w-md max-h-[90vh] overflow-y-auto">
                        <DialogHeader className="pb-2">
                          <DialogTitle>Ê±∫Ê∏àÊÉÖÂ†±„ÅÆÂÖ•Âäõ</DialogTitle>
                        </DialogHeader>
                        {clientSecret && (
                          <div className="overflow-y-auto max-h-[70vh] px-1">
                            <StripePaymentForm
                              clientSecret={clientSecret}
                              amount={textbook.price}
                              textbookTitle={textbook.title}
                              onSuccess={handlePaymentSuccess}
                            />
                          </div>
                        )}
                      </DialogContent>
                    </Dialog>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      )}

      {/* „É°„ÉÉ„Çª„Éº„Ç∏„Ç®„É™„Ç¢ */}
      <main ref={messagesContainerRef} className="flex-1 container mx-auto px-4 py-2 overflow-y-auto min-h-0">
        <div className="space-y-3 max-w-3xl mx-auto">
          {messages.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-muted-foreground">„Åæ„Å†„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
              <p className="text-sm text-muted-foreground">ÊúÄÂàù„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ„Å£„Å¶„Åø„Åæ„Åó„Çá„ÅÜ</p>
            </div>
          ) : (
            messages.map((msg) => {
              const isCurrentUser = msg.senderId === user?.uid
              const userProfile = isCurrentUser ? currentUserProfile : otherUser
              const isSystemMessage = msg.isSystemMessage
              
              // „Ç∑„Çπ„ÉÜ„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂ†¥Âêà
              if (isSystemMessage) {
                return (
                  <div key={msg.id} className="flex justify-center my-4">
                    <div className="bg-green-50 border border-green-200 rounded-lg p-3 max-w-[80%]">
                      <p className="text-sm text-green-800 text-center font-medium whitespace-pre-wrap">{msg.text}</p>
                      <div className="flex items-center justify-center gap-1 mt-1 text-xs text-green-600">
                        <Clock className="h-3 w-3" />
                        {msg.createdAt?.toDate?.() ? (
                          msg.createdAt.toDate().toLocaleString('ja-JP', { 
                            month: 'numeric', 
                            day: 'numeric', 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })
                        ) : "ÈÄÅ‰ø°‰∏≠..."}
                      </div>
                    </div>
                  </div>
                )
              }
              
              return (
                <div
                  key={msg.id}
                  className={`flex gap-2 ${isCurrentUser ? 'justify-end' : 'justify-start'}`}
                >
                  {!isCurrentUser && !msg.isSystemMessage && (
                    <Link href={`/seller/${otherUserId}`}>
                      <Avatar className="h-8 w-8 mt-1 cursor-pointer hover:opacity-80 transition-opacity">
                        <AvatarImage src={userProfile?.avatarUrl || "/placeholder.svg"} />
                        <AvatarFallback className="bg-muted text-xs">
                          {userProfile?.name?.charAt(0) || "U"}
                        </AvatarFallback>
                      </Avatar>
                    </Link>
                  )}
                  
                  {msg.isSystemMessage && (
                    <div className="flex items-center justify-center w-8 h-8 mt-1 bg-blue-100 rounded-full">
                      <span className="text-xs text-blue-600">üîî</span>
                    </div>
                  )}
                  
                  <div className={`max-w-[70%] ${isCurrentUser ? 'text-right' : 'text-left'} ${msg.isSystemMessage ? 'max-w-[90%]' : ''}`}>
                    <div className={`text-xs text-muted-foreground mb-1 ${isCurrentUser ? 'text-right' : 'text-left'} flex items-center gap-1 ${isCurrentUser ? 'justify-end' : 'justify-start'}`}>
                      <span>{msg.isSystemMessage ? "„Ç∑„Çπ„ÉÜ„É†" : (userProfile?.name || (isCurrentUser ? "„ÅÇ„Å™„Åü" : "‰∏çÊòé"))}</span>
                      {!msg.isSystemMessage && (
                        <OfficialIcon 
                          isOfficial={userProfile?.isOfficial} 
                          officialType={userProfile?.officialType as 'admin' | 'support' | 'team'} 
                          className="scale-75"
                        />
                      )}
                    </div>
                    <div
                      className={`p-3 rounded-2xl ${
                        msg.isSystemMessage
                          ? "bg-blue-50 border border-blue-200 text-blue-800"
                          : isCurrentUser
                          ? "bg-primary text-primary-foreground"
                          : "bg-white border shadow-sm"
                      }`}
                    >
                      <p className="text-sm text-left whitespace-pre-wrap">{msg.text}</p>
                      <div className={`flex items-center gap-1 mt-1 text-xs ${
                        msg.isSystemMessage 
                          ? 'text-blue-600 justify-start'
                          : isCurrentUser 
                          ? 'text-primary-foreground/70 justify-end' 
                          : 'text-muted-foreground justify-start'
                      }`}>
                        <Clock className="h-3 w-3" />
                        {msg.createdAt?.toDate?.() ? (
                          msg.createdAt.toDate().toLocaleString('ja-JP', { 
                            month: 'numeric', 
                            day: 'numeric', 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })
                        ) : "ÈÄÅ‰ø°‰∏≠..."}
                      </div>
                    </div>
                  </div>
                  
                  {isCurrentUser && !msg.isSystemMessage && (
                    <Link href="/mypage">
                      <Avatar className="h-8 w-8 mt-1 cursor-pointer hover:opacity-80 transition-opacity">
                        <AvatarImage src={userProfile?.avatarUrl || "/placeholder.svg"} />
                        <AvatarFallback className="bg-primary/10 text-primary text-xs">
                          {userProfile?.name?.charAt(0) || "U"}
                        </AvatarFallback>
                      </Avatar>
                    </Link>
                  )}
                </div>
              )
            })
          )}
          {/* „Çπ„ÇØ„É≠„Éº„É´Áî®„ÅÆÁ©∫„ÅÆdiv */}
          <div ref={messagesEndRef} />
        </div>
      </main>

      {/* „É°„ÉÉ„Çª„Éº„Ç∏ÂÖ•Âäõ„Ç®„É™„Ç¢ */}
      <footer className="bg-white border-t flex-shrink-0">
        <div className="container mx-auto px-4 py-2">
          <div className="flex gap-2 max-w-3xl mx-auto">
            <Textarea
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ..."
              className="flex-1 min-h-[36px] max-h-32 resize-none"
              rows={1}
              onInput={(e) => {
                const target = e.target as HTMLTextAreaElement
                target.style.height = 'auto'
                target.style.height = Math.min(target.scrollHeight, 128) + 'px'
              }}
            />
            <Button 
              onClick={handleSend} 
              disabled={!newMessage.trim() || isSending} 
              size="sm" 
              className="min-h-[36px] self-end px-3"
            >
              {isSending ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                <Send className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>
      </footer>

      {/* ÈÄöÂ†±„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      <Dialog open={showReportDialog} onOpenChange={setShowReportDialog}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-red-600" />
              „É¶„Éº„Ç∂„Éº„ÇíÈÄöÂ†±
            </DialogTitle>
            <DialogDescription>
              ‰∏çÈÅ©Âàá„Å™Ë°åÁÇ∫„ÇÑÂèñÂºï„Éà„É©„Éñ„É´„ÇíÁÆ°ÁêÜËÄÖ„Å´Â†±Âëä„Åß„Åç„Åæ„Åô
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <div>
              <label className="text-sm font-medium mb-2 block">ÈÄöÂ†±ÁêÜÁî± *</label>
              <Select value={reportReason} onValueChange={setReportReason}>
                <SelectTrigger>
                  <SelectValue placeholder="ÁêÜÁî±„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="no_show">Á¥ÑÊùü„ÅÆÊó•ÊôÇ„Å´Áèæ„Çå„Åö„ÄÅÈÄ£Áµ°„ÅåÂèñ„Çå„Å™„ÅÑ</SelectItem>
                  <SelectItem value="fraud">Ë©êÊ¨∫ÁöÑË°åÁÇ∫ÔºàÂÅΩ„ÅÆÂïÜÂìÅÊÉÖÂ†±„ÄÅ‰ª£ÈáëÊåÅ„Å°ÈÄÉ„ÅíÁ≠âÔºâ</SelectItem>
                  <SelectItem value="harassment">Â´å„Åå„Çâ„Åõ„ÉªËø∑ÊÉëË°åÁÇ∫</SelectItem>
                  <SelectItem value="external_contact">Â§ñÈÉ®SNS„Éª„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„Å∏„ÅÆË™òÂ∞é</SelectItem>
                  <SelectItem value="inappropriate_language">‰∏çÈÅ©Âàá„Å™Ë®ÄËëâÈÅ£„ÅÑ„ÉªÊö¥Ë®Ä</SelectItem>
                  <SelectItem value="fake_profile">„Å™„Çä„Åô„Åæ„Åó„ÉªÂÅΩ„Éó„É≠„Éï„Ç£„Éº„É´</SelectItem>
                  <SelectItem value="payment_issue">Ê±∫Ê∏àÈñ¢ÈÄ£„ÅÆ„Éà„É©„Éñ„É´</SelectItem>
                  <SelectItem value="violation">Âà©Áî®Ë¶èÁ¥ÑÈÅïÂèç</SelectItem>
                  <SelectItem value="other">„Åù„ÅÆ‰ªñ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">Ë©≥Á¥∞Ôºà‰ªªÊÑèÔºâ</label>
              <Textarea
                placeholder="ÂÖ∑‰ΩìÁöÑ„Å™Áä∂Ê≥Å„ÇÑË©≥Á¥∞„Åå„ÅÇ„Çå„Å∞Ë®òÂÖ•„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                value={reportDetails}
                onChange={(e) => setReportDetails(e.target.value)}
                className="min-h-[80px]"
              />
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex items-start gap-2">
                <AlertTriangle className="h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0" />
                <div className="text-sm text-yellow-800">
                  <p><strong>ÈáçË¶Å„Å™Ê≥®ÊÑè‰∫ãÈ†ÖÔºö</strong></p>
                  <ul className="mt-1 space-y-1 list-disc list-inside">
                    <li>ËôöÂÅΩ„ÅÆÈÄöÂ†±„ÅØÂà©Áî®Ë¶èÁ¥ÑÈÅïÂèç„Å®„Å™„Çä„Åæ„Åô</li>
                    <li>ÈÄöÂ†±ÂÜÖÂÆπ„ÅØÁÆ°ÁêÜËÄÖ„ÅåÁ¢∫Ë™ç„Åó„ÄÅÈÅ©Âàá„Å´ÂØæÂøú„Åó„Åæ„Åô</li>
                    <li>Á∑äÊÄ•„ÅÆÂ†¥Âêà„ÅØÁõ¥Êé•ÈÅãÂñ∂„Åæ„ÅßÈÄ£Áµ°„Åó„Å¶„Åè„Å†„Åï„ÅÑ</li>
                  </ul>
                </div>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox 
                id="report-agreement" 
                checked={agreedToReport}
                onCheckedChange={(checked) => setAgreedToReport(checked as boolean)}
              />
              <label htmlFor="report-agreement" className="text-sm">
                ‰∏äË®ò„ÅÆÂÜÖÂÆπ„Åå‰∫ãÂÆü„Åß„ÅÇ„Çä„ÄÅÂà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Åæ„Åô
              </label>
            </div>
          </div>

          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => {
                setShowReportDialog(false)
                setReportReason("")
                setReportDetails("")
                setAgreedToReport(false)
              }}
            >
              „Ç≠„É£„É≥„Çª„É´
            </Button>
            <Button 
              onClick={handleReport}
              disabled={!reportReason || !agreedToReport || reportSubmitting}
              className="bg-red-600 hover:bg-red-700"
            >
              {reportSubmitting ? "ÈÄÅ‰ø°‰∏≠..." : "ÈÄöÂ†±„Åô„Çã"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
